package by.it_academy.jd2.Mk_JD2_82_21_employees.service;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class DBFiller {

    private static final String DIRECTORY_WITH_FILES_PARAM_NAME = "../conf/file";
    private static final String FILE_WITH_NAMES_PARAM_NAME = "listName.xlsx";
    private static DBFiller instance = new DBFiller();

    private static final int MAX_VALUE_OF_SALARY_PARAM_NAME = 100_000_000;
    private static final long COUNT_OF_DEPARTMENTS_PARAM_NAME = 5;
    private static final long COUNT_OF_POSITIONS_PARAM_NAME = 10;

    private DBFiller(){
    }

    static {
        try {
            Class.forName("org.postgresql.Driver");
        } catch (ClassNotFoundException ex) {
            throw new IllegalStateException("Ошибка загрузки драйвера", ex);
        }
    }

    public void autoAddingOfEmployees(int count) {
        String[] arrayName = getArrayOfNames();

        try (Connection con = DriverManager.getConnection(
                "jdbc:postgresql://localhost:5432/employees",
                "postgres", "mir2020mir");
             PreparedStatement preparedStatement = con.prepareStatement("INSERT INTO application.employees(\n" +
                     "name, salary, department, position)\n" + "VALUES (?, ?, ?, ?);")
        ){

            for (int i = 0; i < count; i++) {
                preparedStatement.setString(1, autoGenerateEmployeeName(arrayName));
                preparedStatement.setDouble(2, autoGenerateSalary());
                preparedStatement.setLong(3, autoGenerateDepartment());
                preparedStatement.setLong(4, autoGeneratePosition());

                preparedStatement.executeUpdate();
            }

        }  catch (SQLException ex) {
            throw new IllegalStateException("Ошибка при работе с базой данных", ex);
        }
    }

    private String[] getArrayOfNames(){
        List<String> listName = new ArrayList<>();

        try (FileInputStream inputStream = new FileInputStream( new File(DIRECTORY_WITH_FILES_PARAM_NAME,
                FILE_WITH_NAMES_PARAM_NAME));
             XSSFWorkbook workbook = new XSSFWorkbook(inputStream)) {

            XSSFSheet sheet = workbook.getSheetAt(0);
            Iterator<Row> rowIterator = sheet.iterator();

            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();

                Iterator <Cell> cellIterator = row.iterator();

                while (cellIterator.hasNext()){
                    Cell cell = cellIterator.next();
                    String name = cell.getStringCellValue();
                    if (!name.equals("")) {
                        listName.add(name);
                    }
                }
            }

        } catch (FileNotFoundException ex) {
            System.out.println("Ошибка при чтении файла xlsx");
        } catch (IOException e) {
            System.out.println("Ошибка при чтении файла xlsx");
        }

        String[] arrayName = listName.toArray(new String[0]);
        return arrayName;
    }

    private String autoGenerateEmployeeName(String[] array) {
        int a = (int) (Math.random() * array.length);
        return array[a];
    }

    private double autoGenerateSalary() {
        double b = Math.random() * MAX_VALUE_OF_SALARY_PARAM_NAME;
        return BigDecimal.valueOf(b).setScale(2, RoundingMode.HALF_UP).doubleValue();
    }

    private long autoGenerateDepartment() {
        return (long) (1 + Math.random() * COUNT_OF_DEPARTMENTS_PARAM_NAME);
    }

    private long autoGeneratePosition() {
        return (long) (1 + Math.random() * COUNT_OF_POSITIONS_PARAM_NAME);
    }

    public static DBFiller getInstance() {
        return instance;
    }
}
